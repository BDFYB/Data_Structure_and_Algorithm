#include <vector>
#include <iostream>
#include <pthread.h>
#include <time.h>

using std::vector;

int MIN_LIST_NUMBER_TO_CREATE_NEW_THREAD = 5;

class sort_data {
public:
    sort_data (vector<int> &data, int l, int h): data(data), low(l), high(h){};
    vector<int> &data;
    int low;
    int high;
};

void swap_num(int& a, int& b) {
    int tmp = a;
    a = b;
    b = tmp;
};

void print_arry(vector<int> &data) {
    for (int count = 0; count < data.size(); count ++) {
        std::cout << data[count] << ' ';
    }
    std::cout << std::endl;
};

void* quick_sort(void* args) {
    sort_data* p_instance = (sort_data*)args;
    int low = p_instance->low;
    int high = p_instance->high;
    vector<int>& inputs = p_instance->data;
    if (low >= high) {
        return NULL;
    }
    pthread_t thr1, thr2;
    int i = low;
    int j = high;
    int flag_value = inputs[low];
    while (i < j) {
        while (i < j && inputs[j] > flag_value) {
            j--;
        }
        inputs[i] = inputs[j];
        while (i < j && inputs[i] <= flag_value) {
            i++;
        }
        inputs[j] = inputs[i];
    }
    inputs[i] = flag_value;
    sort_data* lower = new sort_data(inputs, low, i);
    sort_data* higher = new sort_data(inputs, i + 1, high);
    int tr1 = false;
    int tr2 = false;
    if (i - low > MIN_LIST_NUMBER_TO_CREATE_NEW_THREAD) {
        pthread_create(&thr1, NULL, quick_sort, (void*) lower);
        tr1 = true;
    } else {
        quick_sort(lower);
    }
    if (high - i + 1 > MIN_LIST_NUMBER_TO_CREATE_NEW_THREAD) {
        pthread_create(&thr2, NULL, quick_sort, (void*) higher);
        tr2 = true;
    } else {
        quick_sort(higher);
    }
    if (tr1) {
        pthread_join(thr1, NULL);
    }
    if (tr2) {
        pthread_join(thr2, NULL);
    }
    delete lower;
    delete higher;
};


int main(int argv, char* argc[]) {
    clock_t start = clock();
    //int number[] = {95, 45, 15, 78, 84, 51, 24, 12};
    int number[1000]={
1,3,20,43,2,7,4,87,34,65,12,77,11,34,6,7,8,53,2,23,199,55,43,4,34,76,433,6,4,3,2,55,6,3,66,32,5,67,32,2,6,66,7,8,7,9,0,8,7,62,3,4,5,6,7,9,3,4,5,6,2,45,6,7,98,5,34,2,4,6,78,9,67,59,64,22,4,5,60,70,89,61,4,322,23,226,744,8,6,65,533,422,344,264,233,367,434,444,55,534
,1,3,20,43,2,7,4,87,34,65,12,77,11,34,6,7,8,53,2,23,199,55,43,4,34,76,433,6,4,3,2,55,6,3,66,32,5,67,32,2,6,66,7,8,7,9,0,8,7,62,3,4,5,6,7,9,3,4,5,6,2,45,6,7,98,5,34,2,4,6,78,9,67,59,64,22,4,5,60,70,89,61,4,322,23,226,744,8,6,65,533,422,344,264,233,367,434,444,55,534
,1,3,20,43,2,7,4,87,34,65,12,77,11,34,6,7,8,53,2,23,199,55,43,4,34,76,433,6,4,3,2,55,6,3,66,32,5,67,32,2,6,66,7,8,7,9,0,8,7,62,3,4,5,6,7,9,3,4,5,6,2,45,6,7,98,5,34,2,4,6,78,9,67,59,64,22,4,5,60,70,89,61,4,322,23,226,744,8,6,65,533,422,344,264,233,367,434,444,55,534
,1,3,20,43,2,7,4,87,34,65,12,77,11,34,6,7,8,53,2,23,199,55,43,4,34,76,433,6,4,3,2,55,6,3,66,32,5,67,32,2,6,66,7,8,7,9,0,8,7,62,3,4,5,6,7,9,3,4,5,6,2,45,6,7,98,5,34,2,4,6,78,9,67,59,64,22,4,5,60,70,89,61,4,322,23,226,744,8,6,65,533,422,344,264,233,367,434,444,55,534
,1,3,20,43,2,7,4,87,34,65,12,77,11,34,6,7,8,53,2,23,199,55,43,4,34,76,433,6,4,3,2,55,6,3,66,32,5,67,32,2,6,66,7,8,7,9,0,8,7,62,3,4,5,6,7,9,3,4,5,6,2,45,6,7,98,5,34,2,4,6,78,9,67,59,64,22,4,5,60,70,89,61,4,322,23,226,744,8,6,65,533,422,344,264,233,367,434,444,55,534
,1,3,20,43,2,7,4,87,34,65,12,77,11,34,6,7,8,53,2,23,199,55,43,4,34,76,433,6,4,3,2,55,6,3,66,32,5,67,32,2,6,66,7,8,7,9,0,8,7,62,3,4,5,6,7,9,3,4,5,6,2,45,6,7,98,5,34,2,4,6,78,9,67,59,64,22,4,5,60,70,89,61,4,322,23,226,744,8,6,65,533,422,344,264,233,367,434,444,55,534
,1,3,20,43,2,7,4,87,34,65,12,77,11,34,6,7,8,53,2,23,199,55,43,4,34,76,433,6,4,3,2,55,6,3,66,32,5,67,32,2,6,66,7,8,7,9,0,8,7,62,3,4,5,6,7,9,3,4,5,6,2,45,6,7,98,5,34,2,4,6,78,9,67,59,64,22,4,5,60,70,89,61,4,322,23,226,744,8,6,65,533,422,344,264,233,367,434,444,55,534
,1,3,20,43,2,7,4,87,34,65,12,77,11,34,6,7,8,53,2,23,199,55,43,4,34,76,433,6,4,3,2,55,6,3,66,32,5,67,32,2,6,66,7,8,7,9,0,8,7,62,3,4,5,6,7,9,3,4,5,6,2,45,6,7,98,5,34,2,4,6,78,9,67,59,64,22,4,5,60,70,89,61,4,322,23,226,744,8,6,65,533,422,344,264,233,367,434,444,55,534
,1,3,20,43,2,7,4,87,34,65,12,77,11,34,6,7,8,53,2,23,199,55,43,4,34,76,433,6,4,3,2,55,6,3,66,32,5,67,32,2,6,66,7,8,7,9,0,8,7,62,3,4,5,6,7,9,3,4,5,6,2,45,6,7,98,5,34,2,4,6,78,9,67,59,64,22,4,5,60,70,89,61,4,322,23,226,744,8,6,65,533,422,344,264,233,367,434,444,55,534
,1,3,20,43,2,7,4,87,34,65,12,77,11,34,6,7,8,53,2,23,199,55,43,4,34,76,433,6,4,3,2,55,6,3,66,32,5,67,32,2,6,66,7,8,7,9,0,8,7,62,3,4,5,6,7,9,3,4,5,6,2,45,6,7,98,5,34,2,4,6,78,9,67,59,64,22,4,5,60,70,89,61,4,322,23,226,744,8,6,65,533,422,344,264,233,367,434,444,55,20
};
    vector<int> data(number, number + sizeof(number)/sizeof(number[0]));
    pthread_t main_thread;
    print_arry(data);
    sort_data* inputs = new sort_data(data, 0, data.size()-1);
    pthread_create(&main_thread, NULL, quick_sort, (void*)inputs);
    pthread_join(main_thread, NULL);
    print_arry(data);
    delete inputs;
    clock_t end = clock();
    std::cout<<(float)(end-start)/CLOCKS_PER_SEC<<"s"<<std::endl;
}

